clear
clc


% Read in a standard MATLAB gray scale demo image.
% Get the name of the file that the user wants to use.
defaultFileName = fullfile(cd, '*.*');
[baseFileName, folder] = uigetfile(defaultFileName, 'Select an image file');


% Get the full filename, with path prepended.
fullFileName = fullfile(folder, baseFileName);
% Check if file exists.
if ~exist(fullFileName, 'file')
	% File doesn't exist -- didn't find it there.  Check the search path for it.
	fullFileName = baseFileName; % No path this time.
	if ~exist(fullFileName, 'file')
		% Still didn't find it.  Alert user.
		errorMessage = sprintf('Error: %s does not exist in the search path folders.', fullFileName);
		uiwait(warndlg(errorMessage));
		return;
	end
end

%Read the image from file
bead = imread(fullFileName); 

%Turn bead into grayscale image 
bead=rgb2gray(bead);


%Apply canny edge detection
% edges =  edge(bead,'Canny',[0.35 0.75],25);
edges =  edge(bead,'Canny',[0.05 0.99],4)


% 
% %Apply spatial calibration
% calibration = spatial_calibration(bead);
% distperpix = calibration.distancePerPixel;


figure
imshow(edges);
% 
% %Get coordinates of boundary in user specified units
% [x_im, y_im] = binary_coordinates(edges,distperpix);
% 
% %Plot digitized bead outline
% figure 
% scatter(x_im,y_im)
% title('Digitized Bead Outline')
% xlabel('X distance (mm)')
% ylabel('Y distance (mm)')
% 
% hold on
% 
% %Invert binary image 
% I = double(~edges);
% 
% %Use AOFSkeletons Package to extract topological skeleton. 
% [skeletonImage,fluxImage,distImage] = extract2DSkeletonFromBinaryImage(I);
% %Call again to ensure skeleton is one to one line 
% [skeletonImage,fluxImage,distImage] = extract2DSkeletonFromBinaryImage(skeletonImage);
% 
% %Get coordinates of binary topological skeleton 
% [x_cent,y_cent] = binary_coordinates(skeletonImage,distperpix);
% %Downsample the line to smooth out unwanted peaks and valleys
% [x_cent,y_cent] = downsample(x_cent,y_cent,10);
% 
% %Use Pchip interpolation to create smooth line running through the
% %downsampled topological skeleton 
% xq = 0:0.1:max(x_im);
% pp = pchip(x_cent,y_cent,xq);
% plot(xq,pp)
% 
% x_closest = []
% 
% %Define endcap cutoff distance in mm 
% cutoff = 4.5
% end_cutoff = max(xq)-4.5 
% 
% %Get width profile 
% [minstart, start_idx] = min(abs(xq - cutoff))
% [minend, end_idx] = min(abs(xq - end_cutoff))
% 
% j = 1 
% for i = start_idx:end_idx 
%     i
% 
%     diff = x_im - xq(i);
%     [x_min first_idx] = min(abs(diff))
%     idx = find(x_im == x_im(first_idx))
%     
%     for k = 1:length(idx)
%      
%         if y_im(idx(k)) > pp(i) && length(idx) > 1
%             y_high(j) = y_im(idx(k));
%         elseif y_im(idx(k)) < pp(i) && length(idx) > 1
%             y_low(j) = y_im(idx(k));
%         end
%         
%     end
%     
%      if length(idx) > 1
%          j = j + 1;
%      else
%          xq(i) = [];
%      end
%    
% end
% 
% width = y_high - y_low;
% 
% figure
% plot(xq(start_idx:end_idx),width)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function W = get_width(cutoff,xq,x_im,y_im)
[minstart, start_idx] = min(abs(xq - cutoff));
[minend, end_idx] = min(abs(xq - end_cutoff));

j = 1;
for i = start_idx:end_idx 

    diff = x_im - xq(i);
    [x_min, first_idx] = min(abs(diff));
    idx = find(x_im == x_im(first_idx));
    
    for k = 1:length(idx)
     
        if y_im(idx(k)) > pp(i) && length(idx) > 1
            y_high(j) = y_im(idx(k));
        elseif y_im(idx(k)) < pp(i) && length(idx) > 1
            y_low(j) = y_im(idx(k));
        end
        
    end
    
     if length(idx) > 1
         j = j + 1;
     else
         xq(i) = [];
     end
   
end

width = y_high - y_low;

figure
plot(xq(start_idx:end_idx),width)

end


function [x, y] = binary_coordinates(binaryImage,distperpix)
%Function applies distance per pixel to indexes on the binary image that
%contain the boundary. Each matrix element represents a pixel. Row indexes
%correspond to x coordinates and column indexes correspond to y coordinates

%Find indexes on binary image that contain a 1
[row,col] = find(binaryImage);

%Multiply indexes by distance per pixel 
y = row*distperpix;
x = col*distperpix;

%Shift all x values by the minimum x to make plot start at x = 0 
xmin = min(x);
x = x - xmin; 
end

function [x_new,y_new] = downsample(x,y,spacing)
%Downsample
x_new = [];
y_new = [];
j = 1;
for i = 1:length(x)-1
    if mod(i,spacing) == 0 && i >= spacing
        x_new(j) = x(i);
        y_new(j) = y(i);
        j = j + 1;
    end
end
x_new(end) = x(end);
y_new(end) = y(end);
end

function [x_new,y_new] = thin_centerline(x,y)

j = 1; 

for i = 2:length(x)
    if x(i) == x(i-1) 
        x_new(j) = x(i);
        y_new(j) = (y(i) + y(i-1))/2;
        i = i + 1
        j = j + 1;
    elseif  i+1 <= length(x)
        if x(i) ~= x(i+1)
            x_new(j) = x(i);
            y_new(j) = y(i);
            j = j + 1  
            i = i + 1
        end

    end
end


end

function [] = plot_bead_centerline(vx_sorted,vy_sorted,x_im,y_im)
figure 
scatter(x_im,y_im)
hold on 
scatter(vx_sorted,vy_sorted)
xlabel('X distance (mm)')
ylabel('Y distance (mm)')

end

